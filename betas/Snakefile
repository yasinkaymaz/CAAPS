configfile : "config.yaml"

rule all:
    input:
        expand("{accession}_reads/{accession}_1.fastq.gz", accession= config["accession"]),
        expand("{accession}_reads/{accession}_2.fastq.gz", accession= config["accession"]),
        expand("{accession}_STAR/{accession}Aligned.out.bam", accession= config["accession"])

rule get_SRA_by_accession:
    """
    Retrieve FASTQ file from SRA (Sequence Read Archive) by run accession number.
    """
    output:
        "{accession}_reads/{accession}_1.fastq",
        "{accession}_reads/{accession}_2.fastq"
    params:
        args = "--split-files --progress",
        accession = "{accession}"
    log:
        "{accession}_reads/{accession}.log"
#    conda:
#        "caaps_env.yml"
    shell:
        #'mkdir -p {params.accession}_reads && '
        'fasterq-dump {params.args} {params.accession} -O {params.accession}_reads > {log} 2>&1 | tee {log}'


rule STARindex_create:
        output:
            "humanSTARindex/Genome",
            "humanSTARindex/Homo_sapiens.GRCh38.99.gtf",
            "humanSTARindex/Homo_sapiens.GRCh38.dna.primary_assembly.fa",
            "humanSTARindex/SA",
            directory("humanSTARindex")
#        conda:
#            "caaps_env.yml"
        log:
            "wget.log"
        threads:
            4
        shell:
            #'mkdir {output} && \
            'STAR --runMode genomeGenerate \
            --runThreadN {threads} \
            --genomeDir humanSTARindex \
            --genomeFastaFiles Homo_sapiens.GRCh38.dna.primary_assembly.fa \
            --sjdbGTFfile Homo_sapiens.GRCh38.99.gtf'

rule STARsolo:
    """
    STARsolo alignment
    """
        input:
            R1="{accession}_reads/{accession}_1.fastq",
            R2="{accession}_reads/{accession}_2.fastq",
            refdir="humanSTARindex/"
        params:
            outdir = "{accession}_STAR",
            prefix = "{accession}"
            #extra = "{extra_star_params}"
        output:
            '{accession}_STAR/{accession}Aligned.out.bam'
        threads:
            2 # set the maximum number of available cores
        log:
            "{accession}_STAR/STARsolo_{accession}.log"
#        conda:
#            "caaps_env.yml"
        shell:
            #'mkdir -p {params.outdir} && '
            'STAR --genomeDir {input.refdir} \
            --readFilesIn {input.R2} {input.R1} \
            --soloType Droplet \
            --outSAMattributes CR CY UR UY \
            --outSAMtype BAM Unsorted \
            --runThreadN {threads} \
            --soloCBwhitelist {input.refdir}/737K-august-2016.txt \
            --outFileNamePrefix {params.outdir}/{params.prefix} > {log} 2>&1 | tee {log} && '
            'gzip {params.prefix}_STAR/{params.prefix}Solo.out/Gene/filtered/*'

rule GzipFq:
    """
    Zip to save some space.
    """
        input:
            R1="{accession}_reads/{accession}_1.fastq",
            R2="{accession}_reads/{accession}_2.fastq",
            bam='{accession}_STAR/{accession}Aligned.out.bam'
        output:
            '{accession}_reads/{accession}_1.fastq.gz',
            '{accession}_reads/{accession}_2.fastq.gz'
        shell:
            'gzip {input.R1} {input.R2}'

#snakemake --cores 6 -c all -s SnakeFile -n
